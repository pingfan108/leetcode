/*
# 647. 回文子串
https://leetcode-cn.com/problems/palindromic-substrings/

给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。
具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。

    示例 1：
输入："abc"
输出：3
解释：三个回文子串: "a", "b", "c"
    示例 2：
输入："aaa"
输出：6
解释：6个回文子串: "a", "a", "a", "aa", "aa", "aaa"

    提示：
输入的字符串长度不会超过 1000 。
 */

// 解法1: 中心拓展(利用回文特性)
// 思路:
// * 遍历所有可能的回文中心, 将每个回文中心能拓展的回文子串数量累加即可.
class Solution {
public:
    int countSubstrings(string s) {
        int res = 0;
        int len = s.length();
        // 循环次数2(L-1), 是为了将回文子串长度为奇偶的两种情况统一到一个循环里
        for (int i = 0; i <= 2*(len - 1); i++) {
            int l = i / 2;      // 回文子串左拓展指针
            int r = l + i % 2;  // 回文子串右拓展指针
            // 以当前中心为基础, 找到能拓展出的回文子串数
            while (l >= 0 && r < len &&  // 左右拓展指针未超出字符串长度范围
                    s[l] == s[r]) {      // 左右拓展指针对应元素符合回文定义
                res++;
                l--;
                r++;
            }
        }
        return res;
    }
};

// 解法2: 动态规划
// 思路:
// * 一个字符串是回文串(大问题) == 首尾字符相同 && 剩余子串也是回文串(子问题)

